?seq_len
seq_len(10)
install.packages("sweave")
library(here)
library(dplyr)
library(glmnet)
library(stringr)
library(caret)
library(data.table)
'%!in%' <- function(x,y)!('%in%'(x,y))
source(here('R/assign_pairs.R'))
source(here('R/chromosome_crossover.R'))
source(here('R/create_random_saplings.R'))
source(here('R/crossover.R'))
source(here('R/darwin_cluster.R'))
source(here('R/create_random_saplings.R'))
clear()
clear
# packages
library(here)
library(tidyverse)
library(wesanderson)
library(future)
library(future.apply)
# general options
options(scipen = 999)
set.seed(288116)
# plotting + parallelization
plan(multicore)
pd <- position_dodge(0.2)
pal <- wes_palette("Darjeeling1")
# simulation settings
n_sim <- 1000
n_samp <- cumsum(rep(sqrt(100), 5))^2
alpha_level <- 0.05
true_coef_A <- 0
# run sequentially over sample size grid
all_sims <- lapply(n_samp, function(n_obs) {
# run in parallel over number of iterations
sim_results <- future_lapply(seq_len(n_sim), function(iter) {
# generate data (NOTE: no effect of A on Y)
W1 <- runif(n_obs)
W2 <- runif(n_obs)
A <- rbinom(n_obs, 1, plogis(W1 - W2))
Y <- 2 + true_coef_A * A + 3 * W1 + W2 + W1 * W2 + rnorm(n_obs, 0, 0.1)
dat <- as_tibble(list(Y = Y, A = A, W1 = W1, W2 = W2))
# fit misspecified GLM and GLM with all interactions
bad_glm <- lm(Y ~ A + W1, data = dat)
good_glm <- lm(Y ~ .^2, data = dat)
# get p-values for Wald-style test of the coefficient of A
pval_A_bad <- summary(bad_glm)[["coefficients"]][2, 4]
pval_A_good <- summary(good_glm)[["coefficients"]][2, 4]
pvals <- c(pval_A_bad, pval_A_good)
# create CIs for the coefficient of A and check coverage
ci_A_bad <- confint(bad_glm)[2, ]
covers_A_bad <- between(true_coef_A, ci_A_bad[1], ci_A_bad[2])
ci_A_good <- confint(good_glm)[2, ]
covers_A_good <- between(true_coef_A, ci_A_good[1], ci_A_good[2])
coverage <- c(covers_A_bad, covers_A_good)
# created combined tibble of coverage and p-values
results <- tibble(pvals = pvals, cov = coverage, type = c("bad", "good"))
return(results)
}, future.seed = TRUE)
# summarize results across simulations
sim_results_summary <- bind_rows(sim_results, .id = "iter") %>%
group_by(type) %>%
summarize(
error_rate = mean(pvals <= alpha_level),
coverage_rate = mean(cov)
)
return(sim_results_summary)
}) %>% set_names(n_samp)
# clean up simulation results
all_sims_summary <- bind_rows(all_sims, .id = "n_samp") %>%
mutate(
n_samp = as.numeric(n_samp),
type = case_when(type == "bad" ~ "Misspecified",
type == "good" ~ "Correctly Specified")
)
# plot of Type-I error rate
p_err <- all_sims_summary %>%
ggplot(aes(x = as.factor(n_samp), y = error_rate,
group = type, shape = type, fill = type)) +
geom_point(size = 10, alpha = 0.75, position = pd) +
geom_line(linetype = "dotted", position = pd) +
geom_hline(yintercept = 0.05, linetype = "dashed") +
theme_bw() +
theme(legend.position = c(0.88, 0.66),
legend.background = element_rect(fill = "gray90", size = 0.25,
linetype = "dotted"),
legend.text = element_text(size = 44),
legend.title = element_blank(),
text = element_text(size = 40),
axis.text.x = element_text(colour = "black", size = 30),
axis.text.y = element_text(colour = "black", size = 30)) +
guides(color = guide_legend(title = NULL)) +
labs(x = "Sample size",
y = "Error rate of hypothesis tests at 5% level",
title = "Type-I Error of Correctly Specified v. Misspecified Estimators",
subtitle = "(aggregated across 1000 simulation experiments)"
) +
scale_shape_manual(values = c(22, 25, 12, 13, 23, 24)) +
scale_fill_manual(values = pal)
# plot of confidence interval coverage
p_cov <- all_sims_summary %>%
ggplot(aes(x = as.factor(n_samp), y = coverage_rate,
group = type, shape = type, fill = type)) +
geom_point(size = 10, alpha = 0.75, position = pd) +
geom_line(linetype = "dotted", position = pd) +
geom_hline(yintercept = 0.95, linetype = "dashed") +
theme_bw() +
theme(legend.position = c(0.88, 0.68),
legend.background = element_rect(fill = "gray90", size = 0.25,
linetype = "dotted"),
legend.text = element_text(size = 44),
legend.title = element_blank(),
text = element_text(size = 40),
axis.text.x = element_text(colour = "black", size = 30),
axis.text.y = element_text(colour = "black", size = 30)) +
guides(color = guide_legend(title = NULL)) +
labs(x = "Sample size",
y = "95% confidence interval coverage",
title = "Coverage of Correctly Specified v. Misspecified Estimators",
subtitle = "(aggregated across 1000 simulation experiments)"
) +
scale_shape_manual(values = c(22, 25, 12, 13, 23, 24)) +
scale_fill_manual(values = pal)
?rnorm
?seq_length
?seq_len
